public class Monster
{ 
public final String TOMBSTONE = "HERE LIES A DEAD MONSTER';  
private int  health = 500;  
private int attack = 20;  
private int movement = 2;  
private int xPostion = 0;  
private int yPosition = 0;  
private boolean alive = true;  
public String name = "Big Monster"; // private → The member/variable can only be accessed inside its written class. 
                                    // private prevents others from changing the state of the object. From int to double, or something along those lines. 
                                    // It makes tracking down bugs easier, and also cuts down on the reliance of a single class.
  public int getAttack()  
  {    
    return attack; // gets attack value. 
  }   
  public int getMovement()
  {   
    return movement; // gets movement value
  }
  public int getHealth()
  {
    return health; // obtains the health value.
  }  
    public void setHealth(int decreaseHealth)
    {
    health = health - decreaseHealth;
      if (health < 0 )
      {
      alive = false;
      }  
    }  
    
    public void setHealth(double decreaseHealth) // Overloaded method: Same method with different attribute, i.e double, 
                                                 // Allows for the passing of decimals into the health variable.
    {
    int intDecreaseHealth = (int) decreaseHealth;
    health = health -intDecreaseHealth;
      if (health < 0 )
      {
      alive = false;
      }
    }
      public Monster(int newHealth, int newAttack, int newMovement) // Constructor→ setup function that run first, and only ran once.
                                                                    // needs the same name as the class. 
      {
      health = newHealth;
      attack = newAttack;
      movement = newMovement;
      }  
      public Monster() // default constructor → is an empty set; No instructions.
      {
      }    
      
      
        /* public Monster(int newhealth
        *
        *    {
        *     
        *   
        *   
        *     } 
}
